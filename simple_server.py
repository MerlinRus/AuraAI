"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

from fastapi import FastAPI, Request, File, UploadFile, Form
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, JSONResponse
import uvicorn
import os
import json
from datetime import datetime
from backend.trajectory_smoother import TrajectorySmoother
from backend.trajectory_evaluator import TrajectoryEvaluator
from backend.gif_generator import TrajectoryGifGenerator

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
app = FastAPI(title="Aura - AI Analytics", version="1.0.0")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
from backend.progress_tracker import progress_tracker

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
if os.path.exists("static"):
    app.mount("/static", StaticFiles(directory="static"), name="static")
    print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    static_files = [
        "static/js/script.js",
        "static/css/style.css",
        "static/js/analytics.js",
        "static/js/trajectory_rating.js"
    ]
    
    for file_path in static_files:
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            print(f"üìÅ {file_path}: {file_size} –±–∞–π—Ç")
        else:
            print(f"‚ùå {file_path}: –ù–ï –ù–ê–ô–î–ï–ù")
else:
    print("‚ùå –ü–∞–ø–∫–∞ static –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def debug_requests(request: Request, call_next):
    print(f"üîç –ó–∞–ø—Ä–æ—Å: {request.method} {request.url.path}")
    response = await call_next(request)
    print(f"üì§ –û—Ç–≤–µ—Ç: {response.status_code}")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    if request.url.path.startswith("/static/"):
        response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
        response.headers["Pragma"] = "no-cache"
        response.headers["Expires"] = "0"
    
    return response

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã
if os.path.exists("templates"):
    templates = Jinja2Templates(directory="templates")
    print("‚úÖ –®–∞–±–ª–æ–Ω—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

@app.get("/", response_class=HTMLResponse)
async def read_root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return templates.TemplateResponse("index.html", {"request": request})

@app.get("/get-progress")
async def get_progress():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    progress_data = progress_tracker.get_progress()
    return progress_data

@app.post("/upload-video/")
async def upload_video(file: UploadFile = File(...)):
    """–†–µ–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        upload_path = f"uploads/{file.filename}"
        with open(upload_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        
        print(f"üìÅ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {upload_path}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        from backend.video_processor import VideoProcessor
        from backend.analytics_generator import AnalyticsGenerator
        from backend.real_video_analyzer import RealVideoAnalyzer
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        analyzer = RealVideoAnalyzer()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        print("üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ...")
        analysis_result = analyzer.analyze_video(upload_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏
        analysis_data = {
            'video_filename': file.filename,
            'analysis_result': analysis_result,
            'timestamp': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        analysis_file = f"uploads/analysis_{file.filename}.json"
        with open(analysis_file, 'w', encoding='utf-8') as f:
            json.dump(analysis_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {analysis_file}")
        
        return JSONResponse({
            "status": "success",
            "message": f"–í–∏–¥–µ–æ {file.filename} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ",
            "analytics": analysis_result,
            "analysis_file": analysis_file
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        return JSONResponse({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
        }, status_code=500)

@app.get("/analytics/{video_id}")
async def get_analytics(video_id: str, request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    return templates.TemplateResponse("analytics.html", {
        "request": request,
        "video_id": video_id
    })

@app.get("/demo", response_class=HTMLResponse)
async def demo_page(request: Request):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –Ω–∞–≥–ª—è–¥–Ω—ã–º–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏"""
    return templates.TemplateResponse("demo.html", {"request": request})

@app.get("/test", response_class=HTMLResponse)
async def test_page(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    with open("test_server_debug.html", "r", encoding="utf-8") as f:
        content = f.read()
    return HTMLResponse(content=content)

@app.get("/test-progress", response_class=HTMLResponse)
async def test_progress_page(request: Request):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    with open("test_progress_fix.html", "r", encoding="utf-8") as f:
        content = f.read()
    return HTMLResponse(content=content)

@app.get("/debug-static")
async def debug_static():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö"""
    static_info = {}
    
    static_files = [
        "static/js/script.js",
        "static/css/style.css",
        "static/js/analytics.js",
        "static/js/trajectory_rating.js"
    ]
    
    for file_path in static_files:
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            static_info[file_path] = {
                "exists": True,
                "size": file_size,
                "readable": os.access(file_path, os.R_OK)
            }
        else:
            static_info[file_path] = {
                "exists": False,
                "size": 0,
                "readable": False
            }
    
    return JSONResponse({
        "static_files": static_info,
        "static_dir_exists": os.path.exists("static"),
        "current_working_dir": os.getcwd()
    })

# ===== API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π =====

@app.get("/trajectory-rating/{video_filename}/{trajectory_id}")
async def trajectory_rating_page(request: Request, video_filename: str, trajectory_id: int):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        evaluator = TrajectoryEvaluator()
        gif_generator = TrajectoryGifGenerator()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        analysis_file = f"uploads/analysis_{video_filename}.json"
        if not os.path.exists(analysis_file):
            return JSONResponse({
                "status": "error",
                "message": "–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤–∏–¥–µ–æ."
            }, status_code=404)
        
        with open(analysis_file, 'r', encoding='utf-8') as f:
            analysis_data = json.load(f)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: {analysis_data.keys()}")
        if 'analysis_result' in analysis_data:
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {analysis_data['analysis_result'].keys()}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        trajectories = analysis_data.get('analysis_result', {}).get('trajectories', {})
        if not trajectories:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
            trajectories = analysis_data.get('analysis_result', {}).get('desire_paths', {}).get('trajectories', {})
            if not trajectories:
                return JSONResponse({
                    "status": "error",
                    "message": "–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∞–Ω–∞–ª–∏–∑–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∏–∂—É—â–∏—Ö—Å—è –ª—é–¥–µ–π."
                }, status_code=404)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
        # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏–º–µ—é—Ç –∫–ª—é—á–∏ —Ç–∏–ø–∞ "person_1", "person_2", –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        trajectory_keys = list(trajectories.keys())
        if trajectory_id >= len(trajectory_keys):
            return JSONResponse({
                "status": "error",
                "message": f"–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è {trajectory_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—Å–µ–≥–æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π: {len(trajectory_keys)}"
            }, status_code=404)
        
        trajectory_key = trajectory_keys[trajectory_id]
        trajectory = trajectories[trajectory_key]
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è: {trajectory_key} (ID: {trajectory_id})")
        
        # –°–æ–∑–¥–∞–µ–º GIF –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        gif_path = gif_generator.create_trajectory_gif(
            f"uploads/{video_filename}", 
            trajectory, 
            trajectory_id
        )
        
        return templates.TemplateResponse("trajectory_rating.html", {
            "request": request,
            "video_name": video_filename,
            "trajectory_id": trajectory_id,
            "total_trajectories": len(trajectories),
            "gif_path": gif_path
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ü–µ–Ω–∫–∏: {e}")
        return JSONResponse({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }, status_code=500)

@app.post("/api/rate-trajectory")
async def rate_trajectory(request: Request):
    """API –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
    try:
        data = await request.json()
        print(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏: {data}")
        
        video_filename = data.get('video_filename')
        trajectory_id = data.get('trajectory_id')
        rating = data.get('rating')
        comment = data.get('comment', '')
        smoothness_factor = data.get('smoothness_factor', 0.1)
        
        print(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: video_filename={video_filename}, trajectory_id={trajectory_id}, rating={rating}")
        
        if not video_filename or trajectory_id is None or not rating:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: video_filename={bool(video_filename)}, trajectory_id={trajectory_id} (—Ç–∏–ø: {type(trajectory_id)}), rating={bool(rating)}")
            return JSONResponse({
                "status": "error",
                "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
            }, status_code=400)
        
        evaluator = TrajectoryEvaluator()
        
        success = evaluator.rate_trajectory(
            video_filename=video_filename,
            trajectory_id=trajectory_id,
            rating=rating,
            comment=comment,
            smoothness_factor=smoothness_factor
        )
        
        if success:
            return JSONResponse({
                "status": "success",
                "message": "–û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
            })
        else:
            return JSONResponse({
                "status": "error",
                "message": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏"
            }, status_code=400)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        return JSONResponse({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }, status_code=500)

@app.post("/api/regenerate-gif")
async def regenerate_gif(request: Request):
    """API –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è GIF —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏"""
    try:
        data = await request.json()
        video_filename = data.get('video_filename')
        trajectory_id = data.get('trajectory_id')
        smoothness_factor = data.get('smoothness_factor', 0.1)
        
        if not all([video_filename, trajectory_id]):
            return JSONResponse({
                "status": "error",
                "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
            }, status_code=400)
        
        gif_generator = TrajectoryGifGenerator()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        analysis_file = f"uploads/analysis_{video_filename}.json"
        if not os.path.exists(analysis_file):
            return JSONResponse({
                "status": "error",
                "message": "–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }, status_code=404)
        
        with open(analysis_file, 'r', encoding='utf-8') as f:
            analysis_data = json.load(f)
        
        trajectories = analysis_data.get('analysis_result', {}).get('trajectories', {})
        if not trajectories:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
            trajectories = analysis_data.get('analysis_result', {}).get('desire_paths', {}).get('trajectories', {})
            if not trajectories:
                return JSONResponse({
                    "status": "error",
                    "message": "–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∞–Ω–∞–ª–∏–∑–µ"
                }, status_code=404)
        
        # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏–º–µ—é—Ç –∫–ª—é—á–∏ —Ç–∏–ø–∞ "person_1", "person_2", –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        trajectory_keys = list(trajectories.keys())
        if trajectory_id >= len(trajectory_keys):
            return JSONResponse({
                "status": "error",
                "message": f"–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è {trajectory_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—Å–µ–≥–æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π: {len(trajectory_keys)}"
            }, status_code=404)
        
        trajectory_key = trajectory_keys[trajectory_id]
        trajectory = trajectories[trajectory_key]
        
        print(f"üéØ –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è GIF: {trajectory_key} (ID: {trajectory_id})")
        
        gif_path = gif_generator.create_trajectory_gif(
            f"uploads/{video_filename}",
            trajectory,
            trajectory_id,
            smoothness_factor
        )
        
        return JSONResponse({
            "status": "success",
            "gif_path": gif_path
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GIF: {e}")
        return JSONResponse({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }, status_code=500)

@app.get("/api/video-statistics/{video_filename}")
async def get_video_statistics(video_filename: str):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫ –≤–∏–¥–µ–æ"""
    try:
        evaluator = TrajectoryEvaluator()
        stats = evaluator.get_video_statistics(video_filename)
        
        return JSONResponse({
            "status": "success",
            "statistics": stats
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return JSONResponse({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }, status_code=500)

@app.get("/api/learning-recommendations")
async def get_learning_recommendations():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–±—É—á–µ–Ω–∏—é"""
    try:
        evaluator = TrajectoryEvaluator()
        recommendations = evaluator.get_learning_recommendations()
        
        return JSONResponse({
            "status": "success",
            "recommendations": recommendations
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        return JSONResponse({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }, status_code=500)

@app.post("/analyze-demo-video")
async def analyze_demo_video(request: Request):
    """API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–µ–º–æ-–≤–∏–¥–µ–æ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = await request.json()
        video_path = data.get('video_path')
        video_name = data.get('video_name')
        
        if not video_path or not os.path.exists(video_path):
            return JSONResponse({
                "status": "error",
                "message": "–î–µ–º–æ-–≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            }, status_code=404)
        
        print(f"üé¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–º–æ-–≤–∏–¥–µ–æ: {video_name} ({video_path})")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        from backend.real_video_analyzer import RealVideoAnalyzer
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        analyzer = RealVideoAnalyzer()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–º–æ-–≤–∏–¥–µ–æ
        print("üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–µ–º–æ-–≤–∏–¥–µ–æ...")
        analysis_result = analyzer.analyze_video(video_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏
        analysis_data = {
            'video_filename': os.path.basename(video_path),
            'analysis_result': analysis_result,
            'timestamp': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        analysis_file = f"uploads/analysis_{os.path.basename(video_path)}.json"
        with open(analysis_file, 'w', encoding='utf-8') as f:
            json.dump(analysis_data, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–µ–º–æ-–≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {analysis_file}")
        
        return JSONResponse({
            "status": "success",
            "message": f"–î–µ–º–æ-–≤–∏–¥–µ–æ '{video_name}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ",
            "analysis_result": analysis_result
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–µ–º–æ-–≤–∏–¥–µ–æ: {e}")
        return JSONResponse({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–µ–º–æ-–≤–∏–¥–µ–æ: {str(e)}"
        }, status_code=500)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Aura —Å–µ—Ä–≤–µ—Ä...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    os.makedirs("uploads", exist_ok=True)
    os.makedirs("static/heatmaps", exist_ok=True)
    os.makedirs("static/images", exist_ok=True)
    os.makedirs("static/trajectory_gifs", exist_ok=True)
    
    print("üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≥–æ—Ç–æ–≤–∞")
    print("üåê –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://127.0.0.1:8000")
    
    uvicorn.run(app, host="127.0.0.1", port=8000)