// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Aura

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è CSS
function forceReloadCSS() {
    const links = document.querySelectorAll('link[rel="stylesheet"]');
    links.forEach(link => {
        if (link.href.includes('style.css')) {
            const newHref = link.href.split('?')[0] + '?v=' + Date.now();
            link.href = newHref;
        }
    });
}

document.addEventListener('DOMContentLoaded', function() {
    // –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const fileUploadArea = document.getElementById('fileUploadArea');
    const videoFileInput = document.getElementById('videoFile');
    const uploadForm = document.getElementById('uploadForm');
    const uploadBtn = document.getElementById('uploadBtn');
    const uploadProgress = document.getElementById('uploadProgress');
    const progressFill = document.getElementById('progressFill');
    const progressText = document.getElementById('progressText');
    const resultsSection = document.getElementById('resultsSection');
    const resultsContainer = document.getElementById('resultsContainer');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ drag & drop
    fileUploadArea.addEventListener('click', () => {
        videoFileInput.click();
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progressFill.style.width = '0%';
    progressText.textContent = '–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É';

    fileUploadArea.addEventListener('dragover', (e) => {
        e.preventDefault();
        fileUploadArea.classList.add('dragover');
    });

    fileUploadArea.addEventListener('dragleave', () => {
        fileUploadArea.classList.remove('dragover');
    });

    fileUploadArea.addEventListener('drop', (e) => {
        e.preventDefault();
        fileUploadArea.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            videoFileInput.files = files;
            handleFileSelection(files[0]);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    videoFileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleFileSelection(e.target.files[0]);
        }
    });

    function handleFileSelection(file) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        const allowedTypes = ['video/mp4', 'video/avi', 'video/mov', 'video/quicktime'];
        if (!allowedTypes.includes(file.type)) {
            showError('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ MP4, AVI, MOV');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (500MB)
        const maxSize = 500 * 1024 * 1024;
        if (file.size > maxSize) {
            showError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 500MB');
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        fileUploadArea.querySelector('p').innerHTML = `
            <i class="fas fa-check-circle" style="color: #28a745;"></i><br>
            <strong>${file.name}</strong><br>
            <small>–†–∞–∑–º–µ—Ä: ${formatFileSize(file.size)}</small>
        `;
        
        uploadBtn.disabled = false;
        uploadBtn.innerHTML = '<i class="fas fa-magic"></i> –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ';
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    uploadForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        if (!videoFileInput.files[0]) {
            showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª');
            return;
        }

        await uploadAndAnalyze(videoFileInput.files[0]);
    });

    async function uploadAndAnalyze(file) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        uploadProgress.style.display = 'block';
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...';
        
        const formData = new FormData();
        formData.append('file', file);

        try {
            // –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            const loadingMessages = [
                'üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ...',
                'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–¥—Ä—ã...',
                'üë• –ò—â–µ–º –ª—é–¥–µ–π...',
                'üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏—è...',
                'üõ§Ô∏è –í—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–æ–ø—ã...',
                'üî• –°—Ç—Ä–æ–∏–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É...',
                'üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å...',
                '‚ú® –°–≥–ª–∞–∂–∏–≤–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏...',
                'üé® –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...',
                'üìã –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...'
            ];
            
            let messageIndex = 0;
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            updateProgress(5, loadingMessages[0]);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 1.5 —Å–µ–∫—É–Ω–¥—ã
            const messageInterval = setInterval(() => {
                if (messageIndex < loadingMessages.length) {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                    const currentProgress = progressFill.style.width;
                    const progressPercent = currentProgress ? currentProgress.replace('%', '') : '0';
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    if (parseInt(progressPercent) > 0) {
                        progressText.innerHTML = `${loadingMessages[messageIndex]} <span class="progress-percent">${progressPercent}%</span>`;
                    } else {
                        progressText.textContent = loadingMessages[messageIndex];
                    }
                    messageIndex++;
                }
            }, 2000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ 2 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            
            // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            updateProgress(10, loadingMessages[0]);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            updateProgress(15, loadingMessages[1]);
            
            const response = await fetch('/upload-video/', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            await sleep(400);
            updateProgress(25, loadingMessages[2]);
            
            await sleep(400);
            updateProgress(35, loadingMessages[3]);
            
            await sleep(400);
            updateProgress(45, loadingMessages[4]);
            
            await sleep(400);
            updateProgress(55, loadingMessages[5]);
            
            await sleep(400);
            updateProgress(65, loadingMessages[6]);
            
            const result = await response.json();
            
            if (result.status === 'success') {
                await sleep(400);
                updateProgress(75, loadingMessages[7]);
                
                await sleep(400);
                updateProgress(85, loadingMessages[8]);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                await sleep(600);
                
                updateProgress(95, loadingMessages[9]);
                
                await sleep(400);
                
                updateProgress(100, 'üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                clearInterval(messageInterval);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏
                window.currentVideoFilename = result.analytics.video_filename || file.name;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                displayResults(result.analytics);
                
            } else {
                throw new Error(result.message || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            showError(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: ${error.message}`);
            resetUploadForm();
            // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
            uploadProgress.style.display = 'none';
        }
    }

    function updateProgress(percent, message) {
        // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progressFill.style.width = `${percent}%`;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        if (percent > 0) {
            progressText.innerHTML = `${message} <span class="progress-percent">${percent}%</span>`;
        } else {
            progressText.textContent = message;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        progressFill.classList.add('progressing');
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            progressFill.classList.remove('progressing');
        }, 800);
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percent}% - ${message}`);
    }

    function displayResults(analytics) {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        uploadProgress.style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        resultsSection.style.display = 'block';
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        const resultsHTML = generateResultsHTML(analytics);
        resultsContainer.innerHTML = resultsHTML;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        const ratingSection = document.getElementById('ratingSection');
        if (ratingSection) {
            ratingSection.style.display = 'block';
        }
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        resultsSection.scrollIntoView({ behavior: 'smooth' });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        uploadBtn.innerHTML = '<i class="fas fa-plus"></i> –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ';
        uploadBtn.disabled = false;
    }

    function generateResultsHTML(analytics) {
        const summary = analytics.summary || {};
        const heatmap = analytics.heatmap || {};
        const desirePaths = analytics.desire_paths || {};
        const queueAnalysis = analytics.queue_analysis || {};
        const anomalies = analytics.anomalies || {};

        return `
            <div class="results-grid">
                <!-- –°–≤–æ–¥–∫–∞ -->
                <div class="result-card">
                    <h4><i class="fas fa-chart-line"></i> –û–±—â–∞—è —Å–≤–æ–¥–∫–∞</h4>
                    <div class="stats-grid">
                        <div class="stat">
                            <span class="stat-value">${summary.total_visitors || 0}</span>
                            <span class="stat-label">–í—Å–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value">${summary.max_concurrent_visitors || 0}</span>
                            <span class="stat-label">–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value">${Math.round(summary.avg_visit_duration || 0)}—Å</span>
                            <span class="stat-label">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value">${summary.peak_time || 'N/A'}</span>
                            <span class="stat-label">–í—Ä–µ–º—è –ø–∏–∫–∞</span>
                        </div>
                    </div>
                </div>

                <!-- –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ -->
                <div class="result-card featured-card">
                    <h4><i class="fas fa-fire"></i> –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏</h4>
                    ${heatmap.image_path ? 
                        `<div class="image-container">
                            <img src="${heatmap.image_path}" alt="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞" class="result-image impressive-image">
                            <div class="image-overlay">
                                <span class="overlay-text">–ù–∞–≥–ª—è–¥–Ω–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</span>
                            </div>
                        </div>` :
                        '<p class="no-data">–î–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã</p>'
                    }
                    ${heatmap.hot_spots && heatmap.hot_spots.length > 0 ? 
                        `<div class="hot-spots">
                            <p><strong>üî• –ó–æ–Ω—ã –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:</strong></p>
                            <ul>
                                ${heatmap.hot_spots.slice(0, 3).map(spot => 
                                    `<li><span class="zone-indicator">‚óè</span> ${spot.location}</li>`
                                ).join('')}
                            </ul>
                        </div>` : ''
                    }
                </div>

                <!-- –¢—Ä–æ–ø—ã –∂–µ–ª–∞–Ω–∏–π -->
                <div class="result-card featured-card">
                    <h4><i class="fas fa-route"></i> –¢—Ä–æ–ø—ã –∂–µ–ª–∞–Ω–∏–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π</h4>
                    ${desirePaths.image_path ? 
                        `<div class="image-container">
                            <img src="${desirePaths.image_path}" alt="–¢—Ä–æ–ø—ã –∂–µ–ª–∞–Ω–∏–π" class="result-image impressive-image">
                            <div class="image-overlay">
                                <span class="overlay-text">–†–µ–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–≤–∏–∂–µ–Ω–∏—è</span>
                            </div>
                        </div>` :
                        '<p class="no-data">–î–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã</p>'
                    }
                    <div class="path-insights">
                        <p><strong>üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤:</strong> ${desirePaths.total_paths || 0}</p>
                        <p><strong>‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏:</strong> ${Math.round(desirePaths.avg_path_duration || 0)}—Å</p>
                        ${desirePaths.description ? `<p><strong>üí° –û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${desirePaths.description}</p>` : ''}
                    </div>
                </div>

                <!-- –ê–Ω–∞–ª–∏–∑ –æ—á–µ—Ä–µ–¥–µ–π -->
                <div class="result-card">
                    <h4><i class="fas fa-users-line"></i> –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏</h4>
                    ${queueAnalysis.image_path ? 
                        `<img src="${queueAnalysis.image_path}" alt="–ê–Ω–∞–ª–∏–∑ –æ—á–µ—Ä–µ–¥–µ–π" class="result-image">` :
                        '<p class="no-data">–î–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã</p>'
                    }
                    <p><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å:</strong> ${queueAnalysis.max_concurrent || 0} —á–µ–ª–æ–≤–µ–∫</p>
                    <p><strong>–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å:</strong> ${queueAnalysis.avg_concurrent || 0} —á–µ–ª–æ–≤–µ–∫</p>
                </div>

                <!-- –ê–Ω–æ–º–∞–ª–∏–∏ -->
                <div class="result-card">
                    <h4><i class="fas fa-exclamation-triangle"></i> –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏</h4>
                    ${anomalies.anomalies && anomalies.anomalies.length > 0 ?
                        `<div class="anomalies-list">
                            ${anomalies.anomalies.slice(0, 3).map(anomaly => 
                                `<div class="anomaly-item severity-${anomaly.severity}">
                                    <strong>${getAnomalyTypeLabel(anomaly.type)}</strong>
                                    <p>${anomaly.description}</p>
                                </div>`
                            ).join('')}
                        </div>` :
                        '<p class="no-data">–ê–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</p>'
                    }
                </div>

                <!-- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ -->
                <div class="result-card full-width">
                    <h4><i class="fas fa-lightbulb"></i> –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
                    <div class="recommendations">
                        <div class="recommendation">
                            <i class="fas fa-store"></i>
                            <div>
                                <strong>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏</strong>
                                <p>–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–æ–Ω—ã —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç–µ</p>
                            </div>
                        </div>
                        <div class="recommendation">
                            <i class="fas fa-route"></i>
                            <div>
                                <strong>–£–ª—É—á—à–µ–Ω–∏–µ flow</strong>
                                <p>–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º –¥–≤–∏–∂–µ–Ω–∏—è</p>
                            </div>
                        </div>
                        ${summary.max_concurrent_visitors > summary.avg_concurrent_visitors * 1.5 ?
                            `<div class="recommendation">
                                <i class="fas fa-user-plus"></i>
                                <div>
                                    <strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º</strong>
                                    <p>–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã (${summary.peak_time})</p>
                                </div>
                            </div>` : ''
                        }
                    </div>
                </div>
            </div>
        `;
    }

    function getAnomalyTypeLabel(type) {
        const labels = {
            'stationary_person': '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ö–æ–¥–∞',
            'crowd_surge': '–°–∫–æ–ø–ª–µ–Ω–∏–µ –ª—é–¥–µ–π',
            'long_visit': '–î–æ–ª–≥–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ'
        };
        return labels[type] || type;
    }

    function resetUploadForm() {
        uploadProgress.style.display = 'none';
        uploadBtn.disabled = false;
        uploadBtn.innerHTML = '<i class="fas fa-magic"></i> –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ';
        fileUploadArea.querySelector('p').innerHTML = '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤–∏–¥–µ–æ —Å—é–¥–∞ –∏–ª–∏ <span class="browse-link">–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</span>';
        videoFileInput.value = '';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progressFill.style.width = '0%';
        progressText.textContent = '–ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É';
    }

    function showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.innerHTML = `
            <i class="fas fa-exclamation-circle"></i>
            <span>${message}</span>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if (!document.getElementById('error-styles')) {
            const style = document.createElement('style');
            style.id = 'error-styles';
            style.textContent = `
                .error-message {
                    background: #f8d7da;
                    color: #721c24;
                    padding: 15px 20px;
                    border-radius: 10px;
                    margin: 20px 0;
                    border: 1px solid #f5c6cb;
                    display: flex;
                    align-items: center;
                    gap: 10px;
                    animation: slideIn 0.3s ease;
                }
                @keyframes slideIn {
                    from { opacity: 0; transform: translateY(-10px); }
                    to { opacity: 1; transform: translateY(0); }
                }
            `;
            document.head.appendChild(style);
        }
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
        const existingErrors = document.querySelectorAll('.error-message');
        existingErrors.forEach(error => error.remove());
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—à–∏–±–∫—É
        uploadProgress.parentNode.insertBefore(errorDiv, uploadProgress);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.remove();
            }
        }, 5000);
    }

    function formatFileSize(bytes) {
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        if (bytes === 0) return '0 Byte';
        const i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
    }
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const additionalStyles = `
    <style>
        .results-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
        }
        
        .result-card {
            background: rgba(255, 255, 255, 0.9);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
            border: 1px solid rgba(102, 126, 234, 0.1);
        }
        
        .result-card.full-width {
            grid-column: 1 / -1;
        }
        
        .featured-card {
            position: relative;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none !important;
        }
        
        .featured-card h4 {
            color: white;
            margin-bottom: 25px;
        }
        
        .featured-card h4 i {
            color: #ffd700;
        }
        
        .image-container {
            position: relative;
            overflow: hidden;
            border-radius: 12px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }
        
        .impressive-image {
            width: 100%;
            height: auto;
            transition: transform 0.3s ease;
            border-radius: 12px;
        }
        
        .image-container:hover .impressive-image {
            transform: scale(1.02);
        }
        
        .image-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
            color: white;
            padding: 15px;
            transform: translateY(100%);
            transition: transform 0.3s ease;
        }
        
        .image-container:hover .image-overlay {
            transform: translateY(0);
        }
        
        .overlay-text {
            font-weight: 600;
            font-size: 1.1em;
        }
        
        .hot-spots ul {
            list-style: none;
            padding: 0;
        }
        
        .hot-spots li {
            background: rgba(255, 255, 255, 0.1);
            padding: 12px 15px;
            margin-bottom: 8px;
            border-radius: 8px;
            backdrop-filter: blur(10px);
        }
        
        .zone-indicator {
            color: #ff6b6b;
            font-size: 1.2em;
            margin-right: 10px;
        }
        
        .path-insights {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }
        
        .path-insights p {
            margin-bottom: 10px;
            color: white;
        }
        
        .result-card h4 {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            color: #333;
            font-size: 1.2em;
        }
        
        .result-card h4 i {
            color: #667eea;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }
        
        .stat {
            text-align: center;
            padding: 15px;
            background: rgba(102, 126, 234, 0.05);
            border-radius: 10px;
        }
        
        .stat-value {
            display: block;
            font-size: 1.8em;
            font-weight: bold;
            color: #667eea;
            margin-bottom: 5px;
        }
        
        .stat-label {
            font-size: 0.9em;
            color: #666;
        }
        
        .result-image {
            width: 100%;
            height: auto;
            border-radius: 10px;
            margin-bottom: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .no-data {
            text-align: center;
            color: #999;
            font-style: italic;
            padding: 40px 20px;
            background: rgba(0, 0, 0, 0.02);
            border-radius: 10px;
        }
        
        .hot-spots, .anomalies-list {
            margin-top: 15px;
        }
        
        .anomaly-item {
            padding: 12px 15px;
            border-radius: 8px;
            margin-bottom: 10px;
            border-left: 4px solid;
        }
        
        .anomaly-item.severity-low {
            background: rgba(40, 167, 69, 0.1);
            border-left-color: #28a745;
        }
        
        .anomaly-item.severity-medium {
            background: rgba(255, 193, 7, 0.1);
            border-left-color: #ffc107;
        }
        
        .anomaly-item.severity-high {
            background: rgba(220, 53, 69, 0.1);
            border-left-color: #dc3545;
        }
        
        .recommendations {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .recommendation {
            display: flex;
            align-items: flex-start;
            gap: 15px;
            padding: 20px;
            background: rgba(102, 126, 234, 0.05);
            border-radius: 10px;
        }
        
        .recommendation i {
            color: #667eea;
            font-size: 1.3em;
            margin-top: 3px;
        }
        
        .recommendation strong {
            display: block;
            margin-bottom: 5px;
            color: #333;
        }
        
        .recommendation p {
            color: #666;
            line-height: 1.5;
            margin: 0;
        }
        
        @media (max-width: 768px) {
            .results-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ head
document.head.insertAdjacentHTML('beforeend', additionalStyles);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
document.addEventListener('DOMContentLoaded', function() {
    const startRatingBtn = document.getElementById('startRatingBtn');
    if (startRatingBtn) {
        startRatingBtn.addEventListener('click', function() {
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            const resultsContainer = document.getElementById('resultsContainer');
            if (resultsContainer) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —ç—Ç–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                const videoFilename = getCurrentVideoFilename();
                if (videoFilename) {
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
                    window.location.href = `/trajectory-rating/${encodeURIComponent(videoFilename)}/0`;
                } else {
                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ.');
                }
            }
        });
    }
});

function getCurrentVideoFilename() {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    return window.currentVideoFilename || 'test_video.mp4';
}
