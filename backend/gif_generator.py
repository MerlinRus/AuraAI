import cv2
import numpy as np
from typing import List, Dict, Tuple
import os
from PIL import Image
import imageio

class TrajectoryGifGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä GIF –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π"""
    
    def __init__(self, output_dir: str = "static/trajectory_gifs"):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
        print("üé¨ TrajectoryGifGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def create_trajectory_gif(self, video_path: str, trajectory: List[Dict], 
                             trajectory_id: int, smoothness_factor: float = 0.1,
                             duration_per_frame: float = 0.2) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç GIF —Å –æ–¥–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            trajectory: –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            trajectory_id: ID —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            smoothness_factor: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            duration_per_frame: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É GIF —Ñ–∞–π–ª—É
        """
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            cap = cv2.VideoCapture(video_path)
            if not cap.isOpened():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
            fps = cap.get(cv2.CAP_PROP_FPS)
            width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è GIF
            frames = []
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–∞–¥—Ä–æ–≤ –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            start_frame = min(point['frame'] for point in trajectory)
            end_frame = max(point['frame'] for point in trajectory)
            
            print(f"üé¨ –°–æ–∑–¥–∞–µ–º GIF –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ {trajectory_id}: –∫–∞–¥—Ä—ã {start_frame}-{end_frame}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            for frame_num in range(start_frame, end_frame + 1):
                cap.set(cv2.CAP_PROP_POS_FRAMES, frame_num)
                ret, frame = cap.read()
                
                if not ret:
                    continue
                
                # –†–∏—Å—É–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
                self._draw_trajectory_progress(frame, trajectory, frame_num, smoothness_factor)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
                self._add_trajectory_info(frame, trajectory_id, frame_num, len(trajectory))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB –¥–ª—è PIL
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                pil_frame = Image.fromarray(frame_rgb)
                
                frames.append(pil_frame)
            
            cap.release()
            
            if not frames:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–¥—Ä—ã –¥–ª—è GIF")
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            video_name = os.path.splitext(os.path.basename(video_path))[0]
            gif_filename = f"{video_name}_trajectory_{trajectory_id}.gif"
            gif_path = os.path.join(self.output_dir, gif_filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º GIF
            imageio.mimsave(gif_path, frames, duration=duration_per_frame)
            
            print(f"‚úÖ GIF —Å–æ–∑–¥–∞–Ω: {gif_path} ({len(frames)} –∫–∞–¥—Ä–æ–≤)")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
            web_path = f"/static/trajectory_gifs/{gif_filename}"
            return web_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GIF: {e}")
            return ""
    
    def _draw_trajectory_progress(self, frame: np.ndarray, trajectory: List[Dict], 
                                 current_frame: int, smoothness_factor: float):
        """–†–∏—Å—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞"""
        if len(trajectory) < 2:
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ—á–∫–∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
        current_points = [p for p in trajectory if p['frame'] <= current_frame]
        
        if len(current_points) < 2:
            return
        
        # –†–∏—Å—É–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
        for i in range(len(current_points) - 1):
            pt1 = (current_points[i]['x'], current_points[i]['y'])
            pt2 = (current_points[i + 1]['x'], current_points[i + 1]['y'])
            
            # –¶–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress = i / (len(current_points) - 1)
            color = self._get_progress_color(progress)
            
            # –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            thickness = max(2, int(5 * (1 - smoothness_factor)))
            
            cv2.line(frame, pt1, pt2, color, thickness)
            
            # –†–∏—Å—É–µ–º —Ç–æ—á–∫—É –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            if i == len(current_points) - 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞
                cv2.circle(frame, pt2, 8, (0, 255, 0), -1)  # –ó–µ–ª–µ–Ω–∞—è —Ç–æ—á–∫–∞
                cv2.circle(frame, pt2, 8, (0, 0, 0), 2)     # –ß–µ—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
    
    def _get_progress_color(self, progress: float) -> Tuple[int, int, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
        # –û—Ç —Å–∏–Ω–µ–≥–æ (–Ω–∞—á–∞–ª–æ) –¥–æ –∫—Ä–∞—Å–Ω–æ–≥–æ (–∫–æ–Ω–µ—Ü)
        blue = int(255 * (1 - progress))
        red = int(255 * progress)
        green = 0
        
        return (blue, green, red)  # BGR –¥–ª—è OpenCV
    
    def _add_trajectory_info(self, frame: np.ndarray, trajectory_id: int, 
                            current_frame: int, total_points: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –∫–∞–¥—Ä"""
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        text_bg = np.zeros((80, 300, 3), dtype=np.uint8)
        text_bg[:] = (0, 0, 0)  # –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        cv2.putText(text_bg, f"–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è {trajectory_id}", (10, 25), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        cv2.putText(text_bg, f"–ö–∞–¥—Ä: {current_frame}", (10, 50), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (200, 200, 200), 1)
        cv2.putText(text_bg, f"–¢–æ—á–µ–∫: {total_points}", (10, 75), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (200, 200, 200), 1)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        h, w = text_bg.shape[:2]
        frame[10:10+h, 10:10+w] = text_bg
    
    def create_comparison_gif(self, video_path: str, original_trajectory: List[Dict], 
                             smoothed_trajectory: List[Dict], trajectory_id: int) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç GIF –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏ —Å–≥–ª–∞–∂–µ–Ω–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ
            original_trajectory: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è
            smoothed_trajectory: –°–≥–ª–∞–∂–µ–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è
            trajectory_id: ID —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            
        Returns:
            –ü—É—Ç—å –∫ GIF —Ñ–∞–π–ª—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """
        try:
            cap = cv2.VideoCapture(video_path)
            if not cap.isOpened():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ")
            
            frames = []
            start_frame = min(point['frame'] for point in original_trajectory)
            end_frame = max(point['frame'] for point in original_trajectory)
            
            print(f"üîÑ –°–æ–∑–¥–∞–µ–º GIF —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ {trajectory_id}")
            
            for frame_num in range(start_frame, end_frame + 1):
                cap.set(cv2.CAP_PROP_POS_FRAMES, frame_num)
                ret, frame = cap.read()
                
                if not ret:
                    continue
                
                # –†–∏—Å—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é (–∫—Ä–∞—Å–Ω–∞—è, –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è)
                self._draw_trajectory_comparison(frame, original_trajectory, frame_num, 
                                               color=(0, 0, 255), is_dashed=True)
                
                # –†–∏—Å—É–µ–º —Å–≥–ª–∞–∂–µ–Ω–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é (–∑–µ–ª–µ–Ω–∞—è, —Å–ø–ª–æ—à–Ω–∞—è)
                self._draw_trajectory_comparison(frame, smoothed_trajectory, frame_num, 
                                               color=(0, 255, 0), is_dashed=False)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
                self._add_comparison_legend(frame)
                
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                pil_frame = Image.fromarray(frame_rgb)
                frames.append(pil_frame)
            
            cap.release()
            
            if not frames:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–¥—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º GIF —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            video_name = os.path.splitext(os.path.basename(video_path))[0]
            gif_filename = f"{video_name}_comparison_{trajectory_id}.gif"
            gif_path = os.path.join(self.output_dir, gif_filename)
            
            imageio.mimsave(gif_path, frames, duration=0.3)
            
            print(f"‚úÖ GIF —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {gif_path}")
            return gif_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GIF —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            return ""
    
    def _draw_trajectory_comparison(self, frame: np.ndarray, trajectory: List[Dict], 
                                   current_frame: int, color: Tuple[int, int, int], 
                                   is_dashed: bool):
        """–†–∏—Å—É–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        current_points = [p for p in trajectory if p['frame'] <= current_frame]
        
        if len(current_points) < 2:
            return
        
        for i in range(len(current_points) - 1):
            pt1 = (current_points[i]['x'], current_points[i]['y'])
            pt2 = (current_points[i + 1]['x'], current_points[i + 1]['y'])
            
            if is_dashed and i % 2 == 0:  # –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è
                continue
            
            cv2.line(frame, pt1, pt2, color, 3)
            
            # –¢–æ—á–∫–∞ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            if i == len(current_points) - 2:
                cv2.circle(frame, pt2, 6, color, -1)
    
    def _add_comparison_legend(self, frame: np.ndarray):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–µ–≥–µ–Ω–¥—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π"""
        legend_bg = np.zeros((60, 250, 3), dtype=np.uint8)
        legend_bg[:] = (0, 0, 0)
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è (–∫—Ä–∞—Å–Ω–∞—è, –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è)
        cv2.putText(legend_bg, "--- –û—Ä–∏–≥–∏–Ω–∞–ª", (10, 20), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)
        
        # –°–≥–ª–∞–∂–µ–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è (–∑–µ–ª–µ–Ω–∞—è, —Å–ø–ª–æ—à–Ω–∞—è)
        cv2.putText(legend_bg, "___ –°–≥–ª–∞–∂–µ–Ω–Ω–∞—è", (10, 40), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        h, w = legend_bg.shape[:2]
        frame_h, frame_w = frame.shape[:2]
        frame[10:10+h, frame_w-w-10:frame_w-10] = legend_bg
