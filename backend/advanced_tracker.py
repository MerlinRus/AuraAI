import numpy as np
import cv2
from typing import Dict, List, Tuple, Optional
from collections import deque
import math

class AdvancedPersonTracker:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç—Ä–µ–∫–µ—Ä –ª—é–¥–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º"""
    
    def __init__(self, max_disappeared: int = 30, min_trajectory_length: int = 10):
        self.next_person_id = 1
        self.trackers = {}  # person_id -> PersonTracker
        self.disappeared = {}  # person_id -> frames_disappeared
        self.max_disappeared = max_disappeared
        self.min_trajectory_length = min_trajectory_length
        
    def update(self, detections: List[Tuple[int, int, int, int]], frame_number: int) -> Dict:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–µ—Ä —Å –Ω–æ–≤—ã–º–∏ –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏"""
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–µ—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–µ–∫—Ü–∏–π
        if len(self.trackers) == 0:
            for detection in detections:
                self._create_tracker(detection, frame_number)
            return self._get_current_positions()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —Ç—Ä–µ–∫–µ—Ä–æ–≤
        current_positions = self._get_current_positions()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–π, –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ—Ö –∫–∞–∫ –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö
        if len(detections) == 0:
            for person_id in list(self.disappeared.keys()):
                self.disappeared[person_id] += 1
                if self.disappeared[person_id] > self.max_disappeared:
                    self._delete_tracker(person_id)
            return current_positions
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—Ä–µ–∫–µ—Ä–∞–º–∏
        matched_detections, matched_trackers = self._match_detections_to_trackers(
            detections, current_positions
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–∫–µ—Ä—ã
        for detection_idx, person_id in matched_detections.items():
            self.trackers[person_id].update(detections[detection_idx], frame_number)
            self.disappeared[person_id] = 0
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã –¥–ª—è –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ü–∏–π
        for i, detection in enumerate(detections):
            if i not in matched_detections:
                self._create_tracker(detection, frame_number)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—á–µ–∑–Ω—É–≤—à–∏—Ö –ª—é–¥–µ–π
        for person_id in list(self.disappeared.keys()):
            if person_id not in matched_trackers:
                self.disappeared[person_id] += 1
                if self.disappeared[person_id] > self.max_disappeared:
                    self._delete_tracker(person_id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞
        if frame_number % 30 == 0:  # –ö–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
            active_trackers = len(self.trackers)
            total_detections = len(detections)
            matched_count = len(matched_detections)
            print(f"üéØ –¢—Ä–µ–∫–∏–Ω–≥: –∫–∞–¥—Ä={frame_number}, –¥–µ—Ç–µ–∫—Ü–∏–π={total_detections}, —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ={matched_count}, —Ç—Ä–µ–∫–µ—Ä–æ–≤={active_trackers}")
        
        return self._get_current_positions()
    
    def _create_tracker(self, detection: Tuple[int, int, int, int], frame_number: int):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞"""
        person_id = f"person_{self.next_person_id}"
        self.next_person_id += 1
        
        self.trackers[person_id] = PersonTracker(detection, frame_number)
        self.disappeared[person_id] = 0
        
        print(f"üÜï –°–æ–∑–¥–∞–Ω —Ç—Ä–µ–∫–µ—Ä {person_id} –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ {detection}")
    
    def _delete_tracker(self, person_id: str):
        """–£–¥–∞–ª—è–µ—Ç —Ç—Ä–µ–∫–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞"""
        if person_id in self.trackers:
            del self.trackers[person_id]
        if person_id in self.disappeared:
            del self.disappeared[person_id]
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç—Ä–µ–∫–µ—Ä {person_id}")
    
    def _match_detections_to_trackers(self, detections: List[Tuple[int, int, int, int]], 
                                    current_positions: Dict) -> Tuple[Dict, set]:
        """–°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—Ä–µ–∫–µ—Ä–∞–º–∏"""
        
        if len(current_positions) == 0:
            return {}, set()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        distance_matrix = np.zeros((len(detections), len(current_positions)))
        person_ids = list(current_positions.keys())
        
        for i, detection in enumerate(detections):
            detection_center = self._get_detection_center(detection)
            for j, person_id in enumerate(person_ids):
                tracker_center = current_positions[person_id]
                distance = self._calculate_distance(detection_center, tracker_center)
                distance_matrix[i, j] = distance
        
        # –í–µ–Ω–≥–µ—Ä—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        matched_detections = {}
        matched_trackers = set()
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∂–∞–¥–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –ø–æ—Ä–æ–≥–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è YOLO)
        max_distance = 200  # –ø–∏–∫—Å–µ–ª–∏ (—É–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è YOLO - –ª—é–¥–∏ –º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ)
        
        for i in range(len(detections)):
            best_match = None
            min_distance = float('inf')
            
            for j, person_id in enumerate(person_ids):
                if person_id not in matched_trackers and distance_matrix[i, j] < max_distance:
                    if distance_matrix[i, j] < min_distance:
                        min_distance = distance_matrix[i, j]
                        best_match = person_id
            
            if best_match is not None:
                matched_detections[i] = best_match
                matched_trackers.add(best_match)
        
        return matched_detections, matched_trackers
    
    def _get_detection_center(self, detection: Tuple[int, int, int, int]) -> Tuple[int, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—Ç—Ä –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        x, y, w, h = detection
        return (x + w // 2, y + h // 2)
    
    def _calculate_distance(self, point1: Tuple[int, int], point2: Tuple[int, int]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –µ–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏"""
        return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)
    
    def _get_current_positions(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —Ç—Ä–µ–∫–µ—Ä–æ–≤"""
        positions = {}
        for person_id, tracker in self.trackers.items():
            positions[person_id] = tracker.get_current_position()
        return positions
    
    def get_trajectories(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –≤—Å–µ—Ö –ª—é–¥–µ–π"""
        trajectories = {}
        for person_id, tracker in self.trackers.items():
            if len(tracker.trajectory) >= self.min_trajectory_length:
                trajectories[person_id] = tracker.get_trajectory()
        return trajectories
    
    def get_people_per_frame(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ"""
        max_frame = max([tracker.get_max_frame() for tracker in self.trackers.values()], default=0)
        people_per_frame = []
        
        for frame in range(max_frame + 1):
            count = 0
            for tracker in self.trackers.values():
                if tracker.has_frame(frame):
                    count += 1
            people_per_frame.append(count)
        
        return people_per_frame


class PersonTracker:
    """–¢—Ä–µ–∫–µ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞"""
    
    def __init__(self, initial_detection: Tuple[int, int, int, int], frame_number: int):
        self.trajectory = deque(maxlen=1000)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å
        self.current_detection = initial_detection
        self.add_detection(initial_detection, frame_number)
    
    def update(self, detection: Tuple[int, int, int, int], frame_number: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç—Ä–µ–∫–µ—Ä –Ω–æ–≤—ã–º –¥–µ—Ç–µ–∫—Ü–∏–µ–π"""
        self.current_detection = detection
        self.add_detection(detection, frame_number)
    
    def add_detection(self, detection: Tuple[int, int, int, int], frame_number: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é –≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é"""
        x, y, w, h = detection
        center_x = x + w // 2
        center_y = y + h // 2
        
        self.trajectory.append({
            'x': center_x,
            'y': center_y,
            'frame': frame_number,
            'timestamp': frame_number / 30.0,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 30 FPS
            'width': w,
            'height': h
        })
    
    def get_current_position(self) -> Tuple[int, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é"""
        x, y, w, h = self.current_detection
        return (x + w // 2, y + h // 2)
    
    def get_trajectory(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é"""
        return list(self.trajectory)
    
    def get_max_frame(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞"""
        if not self.trajectory:
            return 0
        return max(point['frame'] for point in self.trajectory)
    
    def has_frame(self, frame_number: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ç–æ—á–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–¥—Ä–µ"""
        return any(point['frame'] == frame_number for point in self.trajectory)
