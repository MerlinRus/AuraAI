"""
–†–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–∏–¥–µ–æ –±–µ–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–æ–∫
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–æ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–≥—Ä—É–∑–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
from typing import List, Dict, Tuple, Optional
import os
from datetime import datetime
import uuid
from backend.trajectory_smoother import TrajectorySmoother
from backend.advanced_tracker import AdvancedPersonTracker
from backend.dwell_time_analyzer import DwellTimeAnalyzer
from backend.progress_tracker import progress_tracker

class RealVideoAnalyzer:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–∫–∏–Ω–≥–∞
        self.max_tracking_distance = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        self.min_trajectory_length = 3    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —É—á–µ—Ç–∞
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
        self.yolo_detector = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç—Ä–µ–∫–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è YOLO
        self.advanced_tracker = AdvancedPersonTracker(
            max_disappeared=120,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º - –ª—é–¥–∏ –º–æ–≥—É—Ç –∏—Å—á–µ–∑–∞—Ç—å –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã (YOLO –º–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∫–∞–¥—Ä—ã)
            min_trajectory_length=1  # –£–º–µ–Ω—å—à–∞–µ–º - —É—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–∂–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≥–ª–∞–∂–∏–≤–∞—Ç–µ–ª—å —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        self.trajectory_smoother = TrajectorySmoother(smoothness_factor=0.1)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
        self.dwell_time_analyzer = DwellTimeAnalyzer(
            grid_size=50,  # –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ —Å–µ—Ç–∫–∏ 50x50 –ø–∏–∫—Å–µ–ª–µ–π
            time_thresholds={
                'light': 1.0,      # 1 —Å–µ–∫—É–Ω–¥–∞ - –ª–µ–≥–∫–∞—è —Ç–µ–ø–ª–æ—Ç–∞
                'medium': 3.0,     # 3 —Å–µ–∫—É–Ω–¥—ã - —Å—Ä–µ–¥–Ω—è—è —Ç–µ–ø–ª–æ—Ç–∞
                'high': 5.0,       # 5 —Å–µ–∫—É–Ω–¥ - –≤—ã—Å–æ–∫–∞—è —Ç–µ–ø–ª–æ—Ç–∞
                'very_high': 10.0  # 10 —Å–µ–∫—É–Ω–¥ - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–µ–ø–ª–æ—Ç–∞
            }
        )
        
        print("üé® TrajectorySmoother –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("üöÄ AdvancedPersonTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("üî• DwellTimeAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def analyze_video(self, video_path: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ"""
        self.current_video_path = video_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
        print(f"üé¨ –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ: {video_path}")
        
        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {video_path}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        fps = cap.get(cv2.CAP_PROP_FPS)
        total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        duration = total_frames / fps if fps > 0 else 0
        
        print(f"üìä –í–∏–¥–µ–æ: {width}x{height}, {fps} FPS, {total_frames} –∫–∞–¥—Ä–æ–≤, {duration:.1f}—Å")
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        trajectories = {}
        people_per_frame = []
        frame_count = 0
        person_id_counter = 0
        previous_centroids = {}
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        analysis_id = str(uuid.uuid4())[:8]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        progress_tracker.reset()
        progress_tracker.update_progress(5, "–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞")
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –ª—é–¥–µ–π...")
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            
            frame_count += 1
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –¥–ª—è –ª—É—á—à–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ YOLO –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞
            if frame_count % 1 != 0:  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                continue
            
            timestamp = frame_count / fps if fps > 0 else frame_count
            
            # –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
            if self.yolo_detector is None:
                try:
                    from backend.yolo_person_detector import YOLOPersonDetector
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à—É –∫–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å
                    custom_model_path = "your_custom_model.pt"
                    if os.path.exists(custom_model_path):
                        print("üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –í–ê–®–£ –∫–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å YOLO!")
                        self.yolo_detector = YOLOPersonDetector(model_path=custom_model_path)
                    else:
                        print("üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–æ–¥–µ–ª—å YOLO")
                        self.yolo_detector = YOLOPersonDetector()
                    
                    print("‚úÖ YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
                    # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –¥–µ—Ç–µ–∫—Ü–∏—é
                    self.yolo_detector = None
            
            # –î–µ—Ç–µ–∫—Ü–∏—è –ª—é–¥–µ–π —Å –ø–æ–º–æ—â—å—é YOLO
            if self.yolo_detector:
                try:
                    detected_people = self.yolo_detector.detect_multiple_people(frame)
                    people_count = len(detected_people)
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
                    detections = [(p[0], p[1], p[2], p[3]) for p in detected_people]
                    
                    # –ï—Å–ª–∏ YOLO –Ω–µ –Ω–∞—à–µ–ª –ª—é–¥–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ fallback
                    if people_count == 0:
                        print("üîÑ YOLO –Ω–µ –Ω–∞—à–µ–ª –ª—é–¥–µ–π –≤ —ç—Ç–æ–º –∫–∞–¥—Ä–µ")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ YOLO –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
                    detected_people = []
                    people_count = 0
                    detections = []
            else:
                # YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                print("‚ö†Ô∏è YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                detected_people = []
                people_count = 0
                detections = []
            
            # people_per_frame —Ç–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç—Ä–µ–∫–µ—Ä–µ
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç—Ä–µ–∫–µ—Ä
            current_centroids = self.advanced_tracker.update(detections, frame_count)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞
            if frame_count % 30 == 0:  # –ö–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
                active_trackers = len(self.advanced_tracker.trackers)
                total_detections = len(detections)
                print(f"üìä –ö–∞–¥—Ä {frame_count}: –¥–µ—Ç–µ–∫—Ü–∏–π={total_detections}, –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–∫–µ—Ä–æ–≤={active_trackers}")
            
            # –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–ø–µ—Ä—å —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç—Ä–µ–∫–µ—Ä–µ
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å
            if frame_count % 30 == 0:
                progress = (frame_count / total_frames) * 100
                progress_tracker.update_progress(progress, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤")
        
        cap.release()
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        if hasattr(self.yolo_detector, 'cleanup'):
            self.yolo_detector.cleanup()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞
        filtered_trajectories = self.advanced_tracker.get_trajectories()
        people_per_frame = self.advanced_tracker.get_people_per_frame()
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(filtered_trajectories)} —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        progress_tracker.update_progress(85, "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π")
        visualizations = self._create_visualizations(
            filtered_trajectories, people_per_frame, 
            width, height, analysis_id, video_path, fps
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        progress_tracker.update_progress(95, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        analytics = self._generate_analytics(
            filtered_trajectories, people_per_frame, 
            duration, visualizations
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º NumPy —Ç–∏–ø—ã –≤ Python —Ç–∏–ø—ã –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        progress_tracker.update_progress(100, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞")
        analytics = self._convert_numpy_types(analytics)
        
        return analytics
    
    def _convert_numpy_types(self, obj):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç NumPy —Ç–∏–ø—ã –≤ Python —Ç–∏–ø—ã –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if isinstance(obj, dict):
            return {key: self._convert_numpy_types(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self._convert_numpy_types(item) for item in obj]
        elif isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        else:
            return obj
    

    
    # –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ _track_people —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º AdvancedPersonTracker
    
    def _create_visualizations(self, trajectories: Dict, people_per_frame: List,
                              width: int, height: int, analysis_id: str, 
                              video_path: str, fps: float) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–¥—Ä-—Ñ–æ–Ω –∏–∑ –≤–∏–¥–µ–æ (–ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä)
        cap = cv2.VideoCapture(video_path)
        ret, background_frame = cap.read()
        cap.release()
        
        if not ret:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ–Ω
            background_frame = np.full((height, width, 3), (240, 240, 240), dtype=np.uint8)
        
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
        heatmap_path = self._create_dwell_time_heatmap(
            trajectories, background_frame, width, height, analysis_id, fps
        )
        
        # 2. –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–æ–ø
        paths_path = self._create_paths_visualization(
            trajectories, background_frame, width, height, analysis_id
        )
        
        # 3. –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
        queue_path = self._create_queue_visualization(
            people_per_frame, analysis_id
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º
        dwell_info = {}
        if hasattr(self, 'dwell_analysis_result'):
            dwell_info = {
                'dwell_time_analysis': {
                    'zones_count': len(self.dwell_analysis_result.get('zones_analysis', [])),
                    'active_zones': self.dwell_analysis_result.get('zones_analysis', [])[:5],  # –¢–æ–ø-5 –∑–æ–Ω
                    'grid_info': self.dwell_analysis_result.get('grid_info', {}),
                    'time_thresholds': self.dwell_time_analyzer.time_thresholds
                }
            }
        
        return {
            'heatmap': heatmap_path,
            'paths': paths_path,
            'queue': queue_path,
            **dwell_info
        }
    
    def _create_dwell_time_heatmap(self, trajectories: Dict, background: np.ndarray,
                                  width: int, height: int, analysis_id: str, fps: float) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –ª—é–¥–µ–π –≤ –∫—Ä–∞—Å–∏–≤–æ–º –¥–∏–∑–∞–π–Ω–µ"""
        
        print(f"üî• –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è... FPS: {fps}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fps –≤–∞–ª–∏–¥–Ω—ã–π
        if fps <= 0:
            print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π FPS: {fps}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30")
            fps = 30.0
        
        dwell_analysis = self.dwell_time_analyzer.analyze_dwell_times(trajectories, fps)
        
        if 'error' in dwell_analysis:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è: {dwell_analysis['error']}")
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
            return self._create_simple_heatmap(trajectories, background, width, height, analysis_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º —Å—Ç–∏–ª–µ, –Ω–æ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
        heatmap_path = self._create_beautiful_dwell_heatmap(
            trajectories, background, width, height, analysis_id, dwell_analysis
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–∞—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.dwell_analysis_result = dwell_analysis
        
        zones_count = len(dwell_analysis.get('zones_analysis', []))
        print(f"‚úÖ –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {zones_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if zones_count == 0:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É")
            return self._create_simple_heatmap(trajectories, background, width, height, analysis_id)
        
        return heatmap_path
    
    def _create_beautiful_dwell_heatmap(self, trajectories: Dict, background: np.ndarray,
                                       width: int, height: int, analysis_id: str, 
                                       dwell_analysis: Dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–º —Å—Ç–∏–ª–µ"""
        
        print("üé® –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try:
            if not isinstance(width, int) or not isinstance(height, int):
                print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: width={type(width)}, height={type(height)}")
                return self._create_simple_heatmap(trajectories, background, width, height, analysis_id)
            
            if not isinstance(background, np.ndarray):
                print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π background: {type(background)}")
                return self._create_simple_heatmap(trajectories, background, width, height, analysis_id)
            
            if not isinstance(dwell_analysis, dict):
                print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π dwell_analysis: {type(dwell_analysis)}")
                return self._create_simple_heatmap(trajectories, background, width, height, analysis_id)
                
            print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: width={width}, height={height}, background_shape={background.shape}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return self._create_simple_heatmap(trajectories, background, width, height, analysis_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
        density_map = np.zeros((height, width), dtype=np.float32)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
        dwell_times = dwell_analysis.get('dwell_times', {})
        grid_info = dwell_analysis.get('grid_info', {})
        zones_analysis = dwell_analysis.get('zones_analysis', [])
        
        if dwell_times and grid_info:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —è—á–µ–π–∫–∞—Ö
            min_x = grid_info['bounds']['min_x']
            min_y = grid_info['bounds']['min_y']
            cell_size = grid_info['cell_size']
            
            for (cell_x, cell_y), dwell_time in dwell_times.items():
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                start_x = int(min_x + cell_x * cell_size)
                end_x = int(min_x + (cell_x + 1) * cell_size)
                start_y = int(min_y + cell_y * cell_size)
                end_y = int(min_y + (cell_y + 1) * cell_size)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                start_x = max(0, min(start_x, width - 1))
                end_x = max(0, min(end_x, width))
                start_y = max(0, min(start_y, height - 1))
                end_y = max(0, min(end_y, height))
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
                max_threshold = self.dwell_time_analyzer.time_thresholds['very_high']
                normalized_intensity = min(dwell_time / max_threshold, 1.0)
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫—É
                if start_y < end_y and start_x < end_x:
                    density_map[start_y:end_y, start_x:end_x] = normalized_intensity
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        if density_map.max() == 0:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–∞—Ä—Ç—É –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏")
            for trajectory in trajectories.values():
                for point in trajectory:
                    x, y = int(point['x']), int(point['y'])
                    if 0 <= x < width and 0 <= y < height:
                        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞—É—Å—Å–æ–≤–æ –ø—è—Ç–Ω–æ
                        cv2.circle(density_map, (x, y), 30, 1.0, -1)
        
        # –†–∞–∑–º—ã—Ç–∏–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        if density_map.max() > 0:
            density_map = cv2.GaussianBlur(density_map, (61, 61), 0)
            density_map = density_map / density_map.max()
        
        # –°–æ–∑–¥–∞–µ–º matplotlib —Ñ–∏–≥—É—Ä—É –≤ –ø—Ä–æ—à–ª–æ–º —Å—Ç–∏–ª–µ
        try:
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
            print(f"‚úÖ Matplotlib —Ñ–∏–≥—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {type(fig)}, {type(ax1)}, {type(ax2)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è matplotlib —Ñ–∏–≥—É—Ä—ã: {e}")
            return self._create_simple_heatmap(trajectories, background, width, height, analysis_id)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä
        try:
            background_rgb = cv2.cvtColor(background, cv2.COLOR_BGR2RGB)
            ax1.imshow(background_rgb)
            ax1.set_title('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ', fontsize=14, weight='bold')
            ax1.axis('off')
            print("‚úÖ –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏: {e}")
            return self._create_simple_heatmap(trajectories, background, width, height, analysis_id)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è
        try:
            ax2.imshow(background_rgb, alpha=0.7)
            if density_map.max() > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é —Ü–≤–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É
                heatmap = ax2.imshow(density_map, cmap='hot', alpha=0.6, 
                                   extent=[0, width, height, 0])
                plt.colorbar(heatmap, ax=ax2, shrink=0.8, label='–í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ)')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä–æ–≥–∞—Ö –≤—Ä–µ–º–µ–Ω–∏
                time_thresholds = self.dwell_time_analyzer.time_thresholds
                ax2.text(10, 30, f"–ü–æ—Ä–æ–≥–∏: 1—Å={time_thresholds['light']}—Å, 3—Å={time_thresholds['medium']}—Å, 5—Å={time_thresholds['high']}—Å, 10—Å={time_thresholds['very_high']}—Å", 
                        fontsize=10, bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8))
            else:
                ax2.text(width/2, height/2, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 
                        ha='center', va='center', fontsize=16, weight='bold', color='red')
            
            ax2.set_title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è', fontsize=14, weight='bold')
            ax2.axis('off')
            print("‚úÖ –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏: {e}")
            return self._create_simple_heatmap(trajectories, background, width, height, analysis_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–∞—Ö
        try:
            if zones_analysis:
                active_zones_text = f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω: {len(zones_analysis)}"
                ax2.text(10, height - 30, active_zones_text, 
                        fontsize=10, bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.8))
            
            plt.suptitle('–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –ª—é–¥–µ–π –≤ –∑–æ–Ω–∞—Ö', fontsize=16, weight='bold')
            plt.tight_layout()
            print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ layout –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return self._create_simple_heatmap(trajectories, background, width, height, analysis_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        try:
            output_path = f"static/images/heatmap_dwell_time_{analysis_id}.png"
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            plt.savefig(output_path, dpi=150, bbox_inches='tight')
            plt.close()
            print(f"üé® –ö—Ä–∞—Å–∏–≤–∞—è —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
            return f"/static/images/heatmap_dwell_time_{analysis_id}.png"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {e}")
            plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            return self._create_simple_heatmap(trajectories, background, width, height, analysis_id)
    
    def _create_simple_heatmap(self, trajectories: Dict, background: np.ndarray,
                              width: int, height: int, analysis_id: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –∫–∞–∫ fallback"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
        density_map = np.zeros((height, width), dtype=np.float32)
        
        for trajectory in trajectories.values():
            for point in trajectory:
                x, y = int(point['x']), int(point['y'])
                if 0 <= x < width and 0 <= y < height:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞—É—Å—Å–æ–≤–æ –ø—è—Ç–Ω–æ
                    cv2.circle(density_map, (x, y), 30, 1.0, -1)
        
        # –†–∞–∑–º—ã—Ç–∏–µ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        if density_map.max() > 0:
            density_map = cv2.GaussianBlur(density_map, (61, 61), 0)
            density_map = density_map / density_map.max()
        
        # –°–æ–∑–¥–∞–µ–º matplotlib —Ñ–∏–≥—É—Ä—É
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä
        background_rgb = cv2.cvtColor(background, cv2.COLOR_BGR2RGB)
        ax1.imshow(background_rgb)
        ax1.set_title('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ', fontsize=14)
        ax1.axis('off')
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        ax2.imshow(background_rgb, alpha=0.7)
        if density_map.max() > 0:
            heatmap = ax2.imshow(density_map, cmap='hot', alpha=0.6, 
                               extent=[0, width, height, 0])
            plt.colorbar(heatmap, ax=ax2, shrink=0.8, label='–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
        
        ax2.set_title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', fontsize=14)
        ax2.axis('off')
        
        plt.suptitle('–ê–Ω–∞–ª–∏–∑ –∑–æ–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (fallback)', fontsize=16, weight='bold')
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_path = f"static/images/heatmap_{analysis_id}.png"
        plt.savefig(output_path, dpi=150, bbox_inches='tight')
        plt.close()
        
        return f"/static/images/heatmap_{analysis_id}.png"
    
    def _create_paths_visualization(self, trajectories: Dict, background: np.ndarray,
                                  width: int, height: int, analysis_id: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–æ–ø –Ω–∞ —Ñ–æ–Ω–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ–Ω
        result_frame = background.copy()
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        colors = [
            (255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0),
            (255, 0, 255), (0, 255, 255), (255, 128, 0), (128, 0, 255)
        ]
        
        # –†–∏—Å—É–µ–º –∫–∞–∂–¥—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
        for i, (person_id, trajectory) in enumerate(trajectories.items()):
            if len(trajectory) < 2:
                continue
            
            color = colors[i % len(colors)]
            
            # –°–≥–ª–∞–∂–∏–≤–∞–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
            smoothed_trajectory = self.trajectory_smoother.smooth_trajectory(trajectory)
            
            # –†–∏—Å—É–µ–º —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π –ø—É—Ç—å
            if len(smoothed_trajectory) >= 2:
                points = [(int(p['x']), int(p['y'])) for p in smoothed_trajectory]
                
                # –†–∏—Å—É–µ–º –ø–ª–∞–≤–Ω—ã–µ –ª–∏–Ω–∏–∏
                for j in range(1, len(points)):
                    cv2.line(result_frame, points[j-1], points[j], color, 3)
            else:
                # Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
                points = [(int(p['x']), int(p['y'])) for p in trajectory]
                for j in range(1, len(points)):
                    cv2.line(result_frame, points[j-1], points[j], color, 3)
            
            # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (–∑–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥)
            cv2.circle(result_frame, points[0], 8, (0, 255, 0), -1)
            cv2.circle(result_frame, points[0], 10, (255, 255, 255), 2)
            
            # –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ (–∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç)
            end_point = points[-1]
            cv2.rectangle(result_frame, 
                         (end_point[0]-8, end_point[1]-8),
                         (end_point[0]+8, end_point[1]+8),
                         (0, 0, 255), -1)
            cv2.rectangle(result_frame, 
                         (end_point[0]-10, end_point[1]-10),
                         (end_point[0]+10, end_point[1]+10),
                         (255, 255, 255), 2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
        legend_y = 30
        cv2.rectangle(result_frame, (10, 10), (300, 80), (0, 0, 0), -1)
        cv2.rectangle(result_frame, (10, 10), (300, 80), (255, 255, 255), 2)
        
        cv2.putText(result_frame, "LEGENDA:", (20, 30), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
        cv2.circle(result_frame, (30, 50), 8, (0, 255, 0), -1)
        cv2.putText(result_frame, "Start", (50, 55), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        cv2.rectangle(result_frame, (22, 62), (38, 78), (0, 0, 255), -1)
        cv2.putText(result_frame, "End", (50, 75), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        cv2.putText(result_frame, f"Trajectories: {len(trajectories)}", 
                   (150, 55), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_path = f"static/images/paths_{analysis_id}.png"
        cv2.imwrite(output_path, result_frame)
        
        return f"/static/images/paths_{analysis_id}.png"
    
    def _create_queue_visualization(self, people_per_frame: List, analysis_id: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏"""
        
        if not people_per_frame:
            return None
        
        # people_per_frame —Ç–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ)
        timestamps = list(range(len(people_per_frame)))
        counts = people_per_frame
        
        plt.figure(figsize=(12, 6))
        plt.plot(timestamps, counts, linewidth=2, color='blue', marker='o', markersize=4)
        plt.fill_between(timestamps, counts, alpha=0.3, color='lightblue')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if counts:
            avg_count = np.mean(counts)
            max_count = max(counts)
            
            plt.axhline(y=avg_count, color='green', linestyle='--', 
                       label=f'–°—Ä–µ–¥–Ω–µ–µ: {avg_count:.1f}')
            plt.axhline(y=max_count, color='red', linestyle='--', 
                       label=f'–ú–∞–∫—Å–∏–º—É–º: {max_count}')
        
        plt.xlabel('–ù–æ–º–µ—Ä –∫–∞–¥—Ä–∞')
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π')
        plt.title('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫–∞–¥—Ä–∞–º (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)')
        plt.legend()
        plt.grid(True, alpha=0.3)
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        output_path = f"static/images/queue_{analysis_id}.png"
        plt.savefig(output_path, dpi=150, bbox_inches='tight')
        plt.close()
        
        return f"/static/images/queue_{analysis_id}.png"
    
    def _generate_analytics(self, trajectories: Dict, people_per_frame: List,
                          duration: float, visualizations: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_people = len(trajectories)
        people_counts = people_per_frame  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
        
        max_concurrent = max(people_counts) if people_counts else 0
        avg_concurrent = np.mean(people_counts) if people_counts else 0
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
        durations = []
        for trajectory in trajectories.values():
            if len(trajectory) > 1:
                traj_duration = trajectory[-1]['timestamp'] - trajectory[0]['timestamp']
                durations.append(traj_duration)
        
        avg_duration = np.mean(durations) if durations else 0
        
        # –í—Ä–µ–º—è –ø–∏–∫–∞
        peak_time = "N/A"
        if people_counts:
            peak_frame_idx = people_counts.index(max_concurrent)
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 30 FPS –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            peak_timestamp = peak_frame_idx / 30.0
            peak_time = f"{int(peak_timestamp // 60):02d}:{int(peak_timestamp % 60):02d}"
        
        # –ù–∞–π–¥–µ–º –≥–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏
        hot_spots = self._find_hot_spots(trajectories)
        
        return {
            "timestamp": datetime.now().isoformat(),
            "video_filename": os.path.basename(self.current_video_path) if hasattr(self, 'current_video_path') else "unknown",
            "summary": {
                "total_visitors": total_people,
                "max_concurrent_visitors": max_concurrent,
                "avg_concurrent_visitors": round(avg_concurrent, 1),
                "avg_visit_duration": round(avg_duration, 1),
                "video_duration": round(duration, 1),
                "peak_time": peak_time
            },
            "trajectories": trajectories,  # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏
            "heatmap": {
                "image_path": visualizations.get('heatmap'),
                "hot_spots": hot_spots,
                "description": "–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–∏–¥–µ–æ"
            },
            "desire_paths": {
                "image_path": visualizations.get('paths'),
                "total_paths": total_people,
                "avg_path_duration": round(avg_duration, 1),
                "description": "–†–µ–∞–ª—å–Ω—ã–µ —Ç—Ä–æ–ø—ã –¥–≤–∏–∂–µ–Ω–∏—è –ª—é–¥–µ–π –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"
            },
            "queue_analysis": {
                "image_path": visualizations.get('queue'),
                "max_concurrent": max_concurrent,
                "avg_concurrent": round(avg_concurrent, 1),
                "description": "–ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–æ–¥—Å—á–µ—Ç–µ –ª—é–¥–µ–π –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ"
            },
            "anomalies": {
                "total_anomalies": 0,
                "anomalies": [],
                "description": "–î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏"
            }
        }
    
    def _find_hot_spots(self, trajectories: Dict) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∑–æ–Ω—ã –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not trajectories:
            return []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏
        all_points = []
        for trajectory in trajectories.values():
            for point in trajectory:
                all_points.append((point['x'], point['y']))
        
        if not all_points:
            return []
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
        # –î–µ–ª–∏–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞ —Å–µ—Ç–∫—É –∏ —Å—á–∏—Ç–∞–µ–º —Ç–æ—á–∫–∏ –≤ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–µ
        min_x = min(p[0] for p in all_points)
        max_x = max(p[0] for p in all_points)
        min_y = min(p[1] for p in all_points)
        max_y = max(p[1] for p in all_points)
        
        grid_size = 10
        x_step = (max_x - min_x) / grid_size
        y_step = (max_y - min_y) / grid_size
        
        grid_counts = {}
        
        for x, y in all_points:
            grid_x = int((x - min_x) // x_step) if x_step > 0 else 0
            grid_y = int((y - min_y) // y_step) if y_step > 0 else 0
            key = (grid_x, grid_y)
            grid_counts[key] = grid_counts.get(key, 0) + 1
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø-3 –∑–æ–Ω—ã
        sorted_zones = sorted(grid_counts.items(), key=lambda x: x[1], reverse=True)
        
        hot_spots = []
        for i, ((grid_x, grid_y), count) in enumerate(sorted_zones[:3]):
            intensity = count / len(all_points)
            hot_spots.append({
                "rank": i + 1,
                "intensity": round(intensity, 2),
                "location": f"–ó–æ–Ω–∞ {i+1} (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {count} —Ç–æ—á–µ–∫)",
                "count": count
            })
        
        return hot_spots
