"""
–î–µ—Ç–µ–∫—Ç–æ—Ä –ª—é–¥–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ YOLO11
"""

import cv2
import numpy as np
from typing import List, Dict, Tuple
from ultralytics import YOLO
import os

class YOLOPersonDetector:
    def __init__(self, model_path: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ª—é–¥–µ–π YOLO
        
        Args:
            model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ YOLO (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)
        """
        try:
            if model_path and os.path.exists(model_path):
                print(f"üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å YOLO: {model_path}")
                self.model = YOLO(model_path)
            else:
                print("üéØ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–æ–¥–µ–ª—å YOLO")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–æ–¥–µ–ª—å YOLO –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª—é–¥–µ–π
                # YOLO –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞–µ—Ç –º–æ–¥–µ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
                self.model = YOLO('yolov8n.pt')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            self.confidence_threshold = 0.25  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 0.3 –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
            print("‚úÖ YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YOLO: {e}")
            self.model = None
    
    def detect_people_in_frame(self, frame: np.ndarray) -> List[Dict]:
        """
        –î–µ—Ç–µ–∫—Ü–∏—è –ª—é–¥–µ–π –≤ –∫–∞–¥—Ä–µ
        
        Args:
            frame: –ö–∞–¥—Ä –≤–∏–¥–µ–æ (BGR)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–∫—Ü–∏–π –ª—é–¥–µ–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        """
        if self.model is None:
            print("‚ö†Ô∏è YOLO –º–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return []
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR –≤ RGB –¥–ª—è YOLO
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
            results = self.model(frame_rgb, verbose=False)
            
            people_detections = []
            
            for result in results:
                if result.boxes is not None:
                    for box in result.boxes:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–ª–∞—Å—Å
                        x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                        confidence = float(box.conf[0].cpu().numpy())
                        class_id = int(box.cls[0].cpu().numpy())
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫ (–∫–ª–∞—Å—Å 0 –≤ COCO)
                        if class_id == 0 and confidence > self.confidence_threshold:
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–∞—à–µ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞
                            detection = {
                                'bbox': {
                                    'x': int(x1),
                                    'y': int(y1),
                                    'width': int(x2 - x1),
                                    'height': int(y2 - y1)
                                },
                                'confidence': confidence,
                                'center_x': int((x1 + x2) / 2),
                                'center_y': int((y1 + y2) / 2)
                            }
                            
                            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
                            if self._validate_detection(detection):
                                people_detections.append(detection)
                                print(f"üë§ YOLO –¥–µ—Ç–µ–∫—Ü–∏—è: {detection['bbox']['width']}x{detection['bbox']['height']}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}")
            
            print(f"üö∂ YOLO –Ω–∞—à–µ–ª {len(people_detections)} –ª—é–¥–µ–π")
            return people_detections
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ YOLO –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
            return []
    
    def _validate_detection(self, detection: Dict) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –∫–∞—á–µ—Å—Ç–≤—É
        
        Args:
            detection: –î–µ—Ç–µ–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –¥–µ—Ç–µ–∫—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
        """
        bbox = detection['bbox']
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —à—É–º–æ–º)
        if bbox['width'] < 20 or bbox['height'] < 40:  # –£–º–µ–Ω—å—à–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            return False
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–æ–π)
        if bbox['width'] > 600 or bbox['height'] > 900:  # –£–≤–µ–ª–∏—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if detection['confidence'] < self.confidence_threshold:
            return False
        
        return True
    
    def detect_multiple_people(self, frame: np.ndarray) -> List[Dict]:
        """
        –î–µ—Ç–µ–∫—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª—é–¥–µ–π –≤ –∫–∞–¥—Ä–µ (–∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        
        Args:
            frame: –ö–∞–¥—Ä –≤–∏–¥–µ–æ
            
        Returns:
            –°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–∫—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ (x, y, width, height)
        """
        detections = self.detect_people_in_frame(frame)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞
        formatted_detections = []
        for det in detections:
            bbox = det['bbox']
            formatted_detections.append((
                bbox['x'], bbox['y'], bbox['width'], bbox['height']
            ))
        
        return formatted_detections
    
    def get_detection_info(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–µ"""
        if self.model is None:
            return "YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        model_name = self.model.ckpt_path if hasattr(self.model, 'ckpt_path') else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"
        return f"YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä: {model_name}"
    
    def load_custom_model(self, model_path: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å YOLO
        
        Args:
            model_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏ (.pt)
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not os.path.exists(model_path):
                print(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
                return False
            
            print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å: {model_path}")
            self.model = YOLO(model_path)
            print("‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def set_confidence_threshold(self, threshold: float):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
        
        Args:
            threshold: –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0.0 - 1.0)
        """
        if 0.0 <= threshold <= 1.0:
            self.confidence_threshold = threshold
            print(f"üéØ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {threshold}")
        else:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.0 - 1.0)")
    
    def cleanup(self):
        """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        if hasattr(self, 'model') and self.model:
            try:
                # YOLO –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
                print("üßπ –†–µ—Å—É—Ä—Å—ã YOLO –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
