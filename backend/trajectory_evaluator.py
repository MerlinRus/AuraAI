import json
import os
from datetime import datetime
from typing import List, Dict, Optional
import sqlite3

class TrajectoryEvaluator:
    """–°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, db_path: str = "trajectory_ratings.db"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not os.path.isabs(db_path):
            self.db_path = os.path.join(os.getcwd(), db_path)
        else:
            self.db_path = db_path
        
        print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤: {self.db_path}")
        self._init_database()
        print("‚≠ê TrajectoryEvaluator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–æ–∫"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ü–µ–Ω–æ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS trajectory_ratings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    video_filename TEXT NOT NULL,
                    trajectory_id INTEGER NOT NULL,
                    rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
                    comment TEXT,
                    smoothness_factor REAL,
                    detection_params TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(video_filename, trajectory_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS error_patterns (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    error_type TEXT NOT NULL,
                    frequency INTEGER DEFAULT 1,
                    last_seen DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def rate_trajectory(self, video_filename: str, trajectory_id: int, 
                       rating: int, comment: str = "", 
                       smoothness_factor: float = 0.1,
                       detection_params: Dict = None) -> bool:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
        
        Args:
            video_filename: –ò–º—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
            trajectory_id: ID —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
            rating: –û—Ü–µ–Ω–∫–∞ 1-5 –∑–≤–µ–∑–¥
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –∫–∞—á–µ—Å—Ç–≤–µ
            smoothness_factor: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            detection_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        print(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏: video_filename={video_filename}, trajectory_id={trajectory_id}, rating={rating}")
        
        if not (1 <= rating <= 5):
            print(f"‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5, –ø–æ–ª—É—á–µ–Ω–æ: {rating}")
            return False
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
            cursor.execute('''
                INSERT OR REPLACE INTO trajectory_ratings 
                (video_filename, trajectory_id, rating, comment, smoothness_factor, detection_params, timestamp)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                video_filename, 
                trajectory_id, 
                rating, 
                comment, 
                smoothness_factor,
                json.dumps(detection_params) if detection_params else None,
                datetime.now().isoformat()
            ))
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫
            if comment:
                self._analyze_error_pattern(comment)
            
            conn.commit()
            conn.close()
            
            print(f"‚≠ê –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {rating}/5 –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ {trajectory_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
            print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            print(f"üìã Stack trace: {traceback.format_exc()}")
            return False
    
    def _analyze_error_pattern(self, comment: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫"""
        error_types = {
            '–∫–æ—Ä–æ—Ç–∫–∞—è': '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è',
            '–ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è': '–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è',
            '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è',
            '–ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ': '–õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ (–Ω–µ —á–µ–ª–æ–≤–µ–∫)',
            '–ø—Ä–æ–ø—É—â–µ–Ω': '–ü—Ä–æ–ø—É—â–µ–Ω —á–µ–ª–æ–≤–µ–∫',
            '–ø—Ä—è–º–∞—è': '–°–ª–∏—à–∫–æ–º –ø—Ä—è–º—ã–µ –ª–∏–Ω–∏–∏',
            '–Ω–µ—Ä–æ–≤–Ω–∞—è': '–ù–µ—Ä–æ–≤–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è'
        }
        
        comment_lower = comment.lower()
        detected_errors = []
        
        for keyword, error_type in error_types.items():
            if keyword in comment_lower:
                detected_errors.append(error_type)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
        if detected_errors:
            try:
                conn = sqlite3.connect(self.db_path)
                cursor = conn.cursor()
                
                for error_type in detected_errors:
                    cursor.execute('''
                        INSERT OR REPLACE INTO error_patterns (error_type, frequency, last_seen)
                        VALUES (?, 
                                COALESCE((SELECT frequency + 1 FROM error_patterns WHERE error_type = ?), 1),
                                ?)
                    ''', (error_type, error_type, datetime.now().isoformat()))
                
                conn.commit()
                conn.close()
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
    
    def get_trajectory_rating(self, video_filename: str, trajectory_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT rating, comment, smoothness_factor, detection_params, timestamp
                FROM trajectory_ratings
                WHERE video_filename = ? AND trajectory_id = ?
            ''', (video_filename, trajectory_id))
            
            result = cursor.fetchone()
            conn.close()
            
            if result:
                return {
                    'rating': result[0],
                    'comment': result[1],
                    'smoothness_factor': result[2],
                    'detection_params': json.loads(result[3]) if result[3] else None,
                    'timestamp': result[4]
                }
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
            return None
    
    def get_video_statistics(self, video_filename: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –≤–∏–¥–µ–æ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('''
                SELECT 
                    COUNT(*) as total_rated,
                    AVG(rating) as avg_rating,
                    MIN(rating) as min_rating,
                    MAX(rating) as max_rating
                FROM trajectory_ratings
                WHERE video_filename = ?
            ''', (video_filename,))
            
            stats = cursor.fetchone()
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
            cursor.execute('''
                SELECT rating, COUNT(*) as count
                FROM trajectory_ratings
                WHERE video_filename = ?
                GROUP BY rating
                ORDER BY rating
            ''', (video_filename,))
            
            rating_distribution = {row[0]: row[1] for row in cursor.fetchall()}
            
            conn.close()
            
            return {
                'total_rated': stats[0],
                'average_rating': round(stats[1], 2) if stats[1] else 0,
                'min_rating': stats[2],
                'max_rating': stats[3],
                'rating_distribution': rating_distribution
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def get_error_patterns(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT error_type, frequency, last_seen
                FROM error_patterns
                ORDER BY frequency DESC
            ''')
            
            patterns = []
            for row in cursor.fetchall():
                patterns.append({
                    'error_type': row[0],
                    'frequency': row[1],
                    'last_seen': row[2]
                })
            
            conn.close()
            return patterns
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫: {e}")
            return []
    
    def get_learning_recommendations(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–æ–∫"""
        patterns = self.get_error_patterns()
        
        recommendations = {
            'common_issues': [],
            'suggested_improvements': []
        }
        
        for pattern in patterns[:5]:  # –¢–æ–ø-5 –ø—Ä–æ–±–ª–µ–º
            recommendations['common_issues'].append({
                'type': pattern['error_type'],
                'frequency': pattern['frequency']
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫
        for pattern in patterns:
            if '–∫–æ—Ä–æ—Ç–∫–∞—è' in pattern['error_type'].lower():
                recommendations['suggested_improvements'].append(
                    "–£–≤–µ–ª–∏—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏"
                )
            elif '–ø—Ä—è–º–∞—è' in pattern['error_type'].lower():
                recommendations['suggested_improvements'].append(
                    "–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã—Ö –ª–∏–Ω–∏–π"
                )
            elif '–ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ' in pattern['error_type'].lower():
                recommendations['suggested_improvements'].append(
                    "–£–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª—é–¥–µ–π"
                )
        
        return recommendations
