import numpy as np
from scipy.interpolate import splprep, splev
from typing import List, Dict, Tuple
import cv2

class TrajectorySmoother:
    """–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–π –¥–≤–∏–∂–µ–Ω–∏—è –ª—é–¥–µ–π"""
    
    def __init__(self, smoothness_factor: float = 0.1):
        """
        Args:
            smoothness_factor: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ (0.01 - –æ—á–µ–Ω—å –ø–ª–∞–≤–Ω–æ, 1.0 - –ø–æ—á—Ç–∏ –ø—Ä—è–º—ã–µ)
        """
        self.smoothness_factor = max(0.01, min(1.0, smoothness_factor))
        print(f"üé® TrajectorySmoother –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–ª–∞–≤–Ω–æ—Å—Ç—å—é: {self.smoothness_factor}")
    
    def smooth_trajectory(self, trajectory: List[Dict]) -> List[Dict]:
        """
        –°–≥–ª–∞–∂–∏–≤–∞–µ—Ç —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é –¥–≤–∏–∂–µ–Ω–∏—è
        
        Args:
            trajectory: –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ [{'x': x, 'y': y, 'frame': frame}, ...]
            
        Returns:
            –°–≥–ª–∞–∂–µ–Ω–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
        """
        if len(trajectory) < 3:
            return trajectory  # –ù–µ—á–µ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞—Ç—å
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ—á–∫–∏
            valid_points = []
            for point in trajectory:
                if isinstance(point, dict) and 'x' in point and 'y' in point:
                    try:
                        x = float(point['x'])
                        y = float(point['y'])
                        if not (np.isnan(x) or np.isnan(y) or np.isinf(x) or np.isinf(y)):
                            valid_points.append(point)
                    except (ValueError, TypeError):
                        continue
            
            if len(valid_points) < 3:
                print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è: {len(valid_points)}")
                return trajectory
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            x_coords = [float(point['x']) for point in valid_points]
            y_coords = [float(point['y']) for point in valid_points]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            if len(set(x_coords)) < 2 or len(set(y_coords)) < 2:
                print(f"‚ö†Ô∏è –í—Å–µ —Ç–æ—á–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
                return trajectory
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä t –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
            t = np.linspace(0, 1, len(valid_points))
            
            # B-spline –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
            try:
                tck, u = splprep([x_coords, y_coords], 
                                s=self.smoothness_factor * len(valid_points),  # –ü–∞—Ä–∞–º–µ—Ç—Ä —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
                                k=min(3, len(valid_points)-1),  # –°—Ç–µ–ø–µ–Ω—å —Å–ø–ª–∞–π–Ω–∞
                                per=False,  # –ù–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è
                                quiet=True)  # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–µ —Ç–æ—á–µ–∫ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                num_points = max(len(valid_points) * 3, 50)
                u_new = np.linspace(0, 1, num_points)
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                smoothed_coords = splev(u_new, tck)
                x_smooth, y_smooth = smoothed_coords
                
                # –°–æ–∑–¥–∞–µ–º —Å–≥–ª–∞–∂–µ–Ω–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
                smoothed_trajectory = []
                for i in range(len(x_smooth)):
                    # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º frame –∏ timestamp
                    if i == 0:
                        frame = valid_points[0].get('frame', 0)
                        timestamp = valid_points[0].get('timestamp', 0)
                    elif i == len(x_smooth) - 1:
                        frame = valid_points[-1].get('frame', 0)
                        timestamp = valid_points[-1].get('timestamp', 0)
                    else:
                        # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è frame –∏ timestamp
                        progress = i / (len(x_smooth) - 1)
                        frame = int(valid_points[0].get('frame', 0) + progress * (valid_points[-1].get('frame', 0) - valid_points[0].get('frame', 0)))
                        timestamp = valid_points[0].get('timestamp', 0) + progress * (valid_points[-1].get('timestamp', 0) - valid_points[0].get('timestamp', 0))
                    
                    smoothed_trajectory.append({
                        'x': int(x_smooth[i]),
                        'y': int(y_smooth[i]),
                        'frame': frame,
                        'timestamp': timestamp
                    })
                
                print(f"‚ú® –¢—Ä–∞–µ–∫—Ç–æ—Ä–∏—è —Å–≥–ª–∞–∂–µ–Ω–∞: {len(trajectory)} ‚Üí {len(smoothed_trajectory)} —Ç–æ—á–µ–∫")
                return smoothed_trajectory
                
            except Exception as spline_error:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ B-spline –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏: {spline_error}")
                # Fallback: –ø—Ä–æ—Å—Ç–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
                return self._simple_smoothing(valid_points)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è: {e}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é")
            return trajectory
    
    def _simple_smoothing(self, points: List[Dict]) -> List[Dict]:
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫–∞–∫ fallback"""
        try:
            if len(points) < 2:
                return points
            
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
            smoothed = []
            for i in range(len(points) - 1):
                current = points[i]
                next_point = points[i + 1]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É
                smoothed.append(current)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É
                mid_x = (current['x'] + next_point['x']) // 2
                mid_y = (current['y'] + next_point['y']) // 2
                mid_frame = (current.get('frame', 0) + next_point.get('frame', 0)) // 2
                mid_timestamp = (current.get('timestamp', 0) + next_point.get('timestamp', 0)) / 2
                
                smoothed.append({
                    'x': mid_x,
                    'y': mid_y,
                    'frame': mid_frame,
                    'timestamp': mid_timestamp
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
            smoothed.append(points[-1])
            
            print(f"üîÑ –ü—Ä–æ—Å—Ç–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: {len(points)} ‚Üí {len(smoothed)} —Ç–æ—á–µ–∫")
            return smoothed
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è: {e}")
            return points
    
    def adjust_smoothness(self, new_smoothness: float):
        """–ò–∑–º–µ–Ω—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–ª–∞–≤–Ω–æ—Å—Ç–∏"""
        self.smoothness_factor = max(0.01, min(1.0, new_smoothness))
        print(f"üéõÔ∏è –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {self.smoothness_factor}")
    
    def get_smoothness_info(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≤–Ω–æ—Å—Ç–∏"""
        return {
            'smoothness_factor': self.smoothness_factor,
            'description': self._get_smoothness_description()
        }
    
    def _get_smoothness_description(self) -> str:
        """–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏"""
        if self.smoothness_factor < 0.05:
            return "–û—á–µ–Ω—å –ø–ª–∞–≤–Ω—ã–µ –ª–∏–Ω–∏–∏"
        elif self.smoothness_factor < 0.2:
            return "–ü–ª–∞–≤–Ω—ã–µ –ª–∏–Ω–∏–∏"
        elif self.smoothness_factor < 0.5:
            return "–£–º–µ—Ä–µ–Ω–Ω–æ –ø–ª–∞–≤–Ω—ã–µ –ª–∏–Ω–∏–∏"
        else:
            return "–ü–æ—á—Ç–∏ –ø—Ä—è–º—ã–µ –ª–∏–Ω–∏–∏"
